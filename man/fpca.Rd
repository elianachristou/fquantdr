% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fpca.R
\name{fpca}
\alias{fpca}
\title{Functional Principal Component Analysis (FPCA)}
\usage{
fpca(ftn, basisname)
}
\arguments{
\item{ftn}{A functional data object containing coefficients and basis
information.  The coefficients is a 3D array (nbasis x n x p), where \code{nbasis}
is the number of basis, \code{n} is the sample size, and \code{p} is the number of
functional variables.}

\item{basisname}{A character string specifying the type of basis function to use.
Options are 'bspline' or 'fourier'.}
}
\value{
\code{fpca} returns a list containing:
\itemize{
\item \code{pred}: Principal component scores.
\item \code{eval}: Eigenvalues of the covariance operator.
\item \code{mat}: Transformation matrix for principal components.
}
}
\description{
\code{fpca} computes FPCA by extracting the coefficient matrix from the
functional data object, constructing the appropriate penalty matrix based
on the specified basis type, and applying eigen decomposition to obtain
functional principal components.
}
\details{
This function performs FPCA on a given function object and returns the
eigenvalues, transformation matrix, and principal component scores of the
functional covariance matrix.  The method supports both univariate
(\code{p = 1}) and multivariaate (\code{p > 1}) functional predictors.
}
\examples{
# set the parameters
n <- 100
p <- 5
nbasis <- 4
nt <- 100
tt <- seq(0, 1, length.out = nt)
eta.mat <- mvtnorm::rmvnorm(n, mean = rep(0, p * nbasis))
eta <- array(eta.mat, dim = c(nbasis, n, p))
# Generate the functional data
data <- fundata(n, p, nbasis, tt, 'bspline', eta)
pca.out <- fpca(list(coef = data$xcoefs, basis = data$basis), 'bspline')
pca.out$eval
mfpca.scores <- pca.out$pred

}
